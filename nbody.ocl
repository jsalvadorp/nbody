

#define EPS2 (6e8f)
#define G (6e-9f)

// usamos float4 para guardar la posicion en los primeros 3 valores y la masa en el ultimo

// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch31.html
// G constante gravitacional??
float4 accDelta(float4 a, float4 b) {
    float4 r = b - a;//(float4) (b.x - a.x, b.y - a.y, b.z - a.z, 0.0f);
    r.w = 0.0f;
    float dist2 = dot(r, r) + EPS2;
    float dist3inv = 1.0f / sqrt(dist2 * dist2 * dist2);
    float s = G * b.w * dist3inv; // * G
    return r * s;
}

__kernel void nbody(
    __global float4 *position, 
    __global float4 *velocity, 
    __global float4 *new_position, 
    __global float4 *new_velocity, 
    float time_delta,
    int count
) {
    int j = get_global_id(0) * get_local_size(0) + get_local_id(0);

    float4 acceleration = (float4)(0.0f);
    for(int i = 0; i < count; i++) {
        acceleration += accDelta(position[j], position[i]);
    }

    float4 delta_vel = acceleration * time_delta; 
    float4 mean_vel = velocity[j] + delta_vel;
    new_position[j] = position[j] + mean_vel * time_delta;
    new_position[j].w = position[j].w;

    new_velocity[j] = velocity[j] + delta_vel;
    
}


